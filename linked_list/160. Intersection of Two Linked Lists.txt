#								SOLUTION - 1								

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        listA_len = 0
        currentA = headA
        while currentA:
            listA_len += 1
            currentA = currentA.next

        listB_len = 0
        currentB = headB
        while currentB:
            listB_len += 1
            currentB = currentB.next

        def findIntersect(headA, headB):
            while headA and headB:
                if headA == headB:
                    return headA
                headA = headA.next
                headB = headB.next
            return None

        if listA_len == listB_len:
            return findIntersect(headA, headB)
        elif listA_len > listB_len:
            advance = listA_len - listB_len
            for _ in range(advance):
                headA = headA.next
        else:
            advance = listB_len - listA_len
            for _ in range(advance):
                headB = headB.next

        return findIntersect(headA, headB)





#								SOLUTION - 2

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        s = set()
        while headA:
            s.add(headA)
            headA = headA.next 

        while headB:
            if headB not in s:
                headB = headB.next
            else:
                break

        return headB
        
        
